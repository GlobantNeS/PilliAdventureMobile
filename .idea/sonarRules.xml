<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="rules">
    <option name="sonarRulesByRuleKey">
      <map>
        <entry key="squid:S134">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;&#10;Nested &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt; statements is a key ingredient for making what's known as &quot;Spaghetti code&quot;.&#10;Such code is hard to read, refactor and therefore maintain.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;The following code snippet illustrates this rule with the default threshold of 3.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;public void process() {&#10;  if (condition1) {                  // Compliant - depth = 1&#10;    /* ... */&#10;    if (condition2) {                // Compliant - depth = 2&#10;      /* ... */&#10;      for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit&#10;        /* ... */&#10;        if (condition4) {            // Non-Compliant - depth = 4&#10;          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4&#10;            /* ... */&#10;          }&#10;          return;&#10;        }&#10;      }&#10;    }&#10;  }&#10;}&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:S134" />
              <option name="langName" value="Java" />
              <option name="name" value="Control flow statements &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, &quot;switch&quot; and &quot;try&quot; should not be nested too deeply" />
              <option name="severity" value="MAJOR" />
            </Rule>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>

